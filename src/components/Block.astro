---
interface Props {
	title: string;
    description: string;
    cards: {
        id: string;
        type?: 'percentage' | 'number';
        title: string;
        value: number;
        color: string;
        tooltip?: string;
        unit?: string;
        gradient?: string;
    }[];
    graphs: {
        id: string;
        type: 'line' | 'bar';
        title: string;
        tooltip?: string;
        data: (string|number)[][];
    }[];
}

const { title, description, cards, graphs } = Astro.props;
---
<div>
    <div class="sm:grid sm:grid-cols-2 lg:grid-cols-12 gap-[22px]">
        <h2 class="lg:col-span-7 text-2xl font-bold">{title}</h2>
        <div class="col-span-7 mt-4 sm:mt-0 text-balance" set:html={description}></div>
    </div>

    {cards.length > 0 && (
        <div class="grid sm:grid-cols-2 lg:grid-cols-4 gap-8 sm:gap-[22px] my-12 sm:my-16">
            {cards.map(({id, title, type = "percentage", value, unit = "%", color, tooltip = false}, index) => (
                <div class={`relative${(cards.length === 2 && index === 1 ? " lg:col-start-3" : "")}`}>
                    {type === "percentage" && (
                        <div class="relative rounded-full aspect-square bg-[#2D3843]/60 p-[14px] flex flex-col items-center justify-center text-center font-bold border-8 border-[#2D3843]">


                        <svg class="pointer-events-none -rotate-90 absolute w-[calc(100%-16px)] h-[calc(100%-16px)] z-10" class="round" viewBox="0 0 239 239" fill="none"  >
                            <circle cx="119.5" cy="119.5" r="109.5" pathLength="100" stroke-width="20" stroke-linejoin="round" stroke={`${color}`} stroke-dasharray={(value + 0.1) + " 999"} />
                        </svg>

                        <div class={`mx-auto w-[160px] text-[30px] text-[${color}]` }>{value} {unit}</div>
                        <div class="mt-1 w-[140px] text-xs leading-[19px]">
                            {title}
                            {tooltip !== false && (
                                    <button id={id} aria-describedby="tooltip" data-tooltip-button={id}>
                                    <svg class="pl-1.5 w-[20px] h-[14px] inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14"><g clip-path="url(#a)"><path stroke="#F6F7F9" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M7 13.125A6.125 6.125 0 1 0 7 .875a6.125 6.125 0 0 0 0 12.25Z"/><path fill="#F6F7F9" d="M7 5.25A.875.875 0 1 0 7 3.5a.875.875 0 0 0 0 1.75Z"/><path stroke="#F6F7F9" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M7 9.625V7"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h14v14H0z"/></clipPath></defs></svg>
                                    </button>
                                    <div id={`tooltip_${id}`} data-tooltip={id} role="tooltip" class="hidden rounded-xl py-6 px-5 bg-[#1F2831] border text-left border-[#2D3843] absolute w-max max-w-[256px] top-0 left-0 font-normal z-20">{tooltip}</div>
                                )}
                        </div>
                        </div>
                    )}

                    {type === "number" && (
                        <div class="aspect-square bg-[#2D3843]/60 px-[28px] pt-12 font-bold border-8 border-[#2D3843] rounded-xl">
                            <div class={`h-5 w-full bg-linear-to-l from-[${color}]`}></div>
                            <div class={`mt-8 text-[30px] text-[${color}]` }>{value} {unit}</div>
                            <div class="mt-1 w-[148px] text-xs leading-[19px]">
                                {title}
                                {tooltip !== false && (
                                    <button id={id} aria-describedby="tooltip" data-tooltip-button={id}>
                                    <svg class="pl-1.5 w-[20px] h-[14px] inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14"><g clip-path="url(#a)"><path stroke="#F6F7F9" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M7 13.125A6.125 6.125 0 1 0 7 .875a6.125 6.125 0 0 0 0 12.25Z"/><path fill="#F6F7F9" d="M7 5.25A.875.875 0 1 0 7 3.5a.875.875 0 0 0 0 1.75Z"/><path stroke="#F6F7F9" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M7 9.625V7"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h14v14H0z"/></clipPath></defs></svg>
                                    </button>
                                    <div id={`tooltip_${id}`} data-tooltip={id} role="tooltip" class="hidden rounded-xl py-6 px-5 bg-[#1F2831] border text-left border-[#2D3843] absolute w-max max-w-[256px] top-0 left-0 font-normal z-20">{tooltip}</div>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            ))}
        </div>
    )}

    {graphs.length > 0 && (
        <div class="lg:grid lg:grid-cols-2 lg:gap-5 space-y-8 lg:space-y-0">
        {graphs.map(({title, tooltip = false, id, data}) => (
            <div class="p-5 sm:pb-12 sm:px-9 sm:pt-10 bg-[#2D3843] rounded-xl h-[280px] md:h-auto">
                <div class="text-center mx-auto max-w-full text-xs font-bold mb-12">
                    {title}
                    {tooltip !== false && (
                        <button id={id} aria-describedby="tooltip" data-tooltip-button={id}>
                        <svg class="pl-1.5 w-[20px] h-[14px] inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14"><g clip-path="url(#a)"><path stroke="#F6F7F9" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M7 13.125A6.125 6.125 0 1 0 7 .875a6.125 6.125 0 0 0 0 12.25Z"/><path fill="#F6F7F9" d="M7 5.25A.875.875 0 1 0 7 3.5a.875.875 0 0 0 0 1.75Z"/><path stroke="#F6F7F9" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M7 9.625V7"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h14v14H0z"/></clipPath></defs></svg>
                        </button>
                        <div id={`tooltip_${id}`} data-tooltip={id} role="tooltip" class="hidden rounded-xl py-6 px-5 bg-[#1F2831] border text-left border-[#2D3843] absolute w-max max-w-[256px] top-0 left-0 font-normal z-20">{tooltip}</div>
                    )}
                </div>
                <canvas class="" data-data={JSON.stringify(data)} id={id}></canvas>
            </div>
        ))}
        </div>
    )}
</div>

<script>
    import Chart from 'chart.js/auto';
    import 'chartjs-adapter-date-fns';
    import { computePosition, flip, shift, offset } from '@floating-ui/dom';

    // --- Type Definition for Chart Options ---
    interface ChartOptions {
        labels: string[];
        data: number[];
        backgroundColor: CanvasGradient;
        pointBorderColor: string;
        pointBackgroundColor: string;
        min: number;
        max: number;
        gridColor: string;
    }

    const tooltips = document.querySelectorAll('[data-tooltip-button]');
    for (const button of tooltips) {
        // @ts-ignore
        const id = button.dataset.tooltipButton;
        const tooltip = document.querySelector(`[data-tooltip="${id}"]`) as HTMLElement;

        function update() {
            computePosition(button, tooltip, {
                placement: 'bottom',
                middleware: [
                    offset(6),
                    flip(),
                    shift({padding: 8}),
                ],
            }).then(({x, y}) => {
                Object.assign(tooltip.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });
            });
        }

        function showTooltip() {
            tooltip.style.display = 'block';
            update();
        }

        function hideTooltip() {
            tooltip.style.display = '';
        }

        [
            ['mouseenter', showTooltip],
            ['mouseleave', hideTooltip],
            ['focus', showTooltip],
            ['blur', hideTooltip],
        ].forEach(([event, listener]) => {
            // @ts-ignore
            button.addEventListener(event, listener);
        });
    }

    (async function() {

        const elements = document.querySelectorAll('canvas');
        Chart.defaults.color = '#737980';
        Chart.defaults.font.family = 'Inter';

        const baseOptions = ({
            labels, data, backgroundColor, pointBorderColor, pointBackgroundColor, min, max, gridColor
        }: ChartOptions) => {
            return {
            type: 'line',
            data: {
                labels,
                datasets: [ { tension: 0.25, label: '', fill: true, data, pointBorderColor, pointBackgroundColor, backgroundColor, pointRadius: 4, pointHoverRadius: 6 }]
            },
            options: {
                clip: false,
                scales: {
                    y: { min, max, border: { display: false }, grid: { color: gridColor, drawTicks: true } },
                    x: {
                        type: 'time',
                        time: { unit: 'week', tooltipFormat: 'MMM d, yyyy' },
                        grid: { display: false },
                        ticks: { display: true }
                    }
                },
                interaction: { intersect: false, },
                plugins: { legend: { display: false } }
            }
        }
        }

        for (const element of elements) {
            const ctx = element.getContext("2d");
            if (!ctx) {
                continue;
            }
            const data = JSON.parse(element.dataset.data ?? '[]')

            const gradientGreen = ctx.createLinearGradient(0, 0, 0, 240);
            gradientGreen.addColorStop(0, 'rgba(0,188,133,1)');
            gradientGreen.addColorStop(1, 'rgba(0,188,133,0)');

            const gradientBlue = ctx.createLinearGradient(0, 0, 0, 240);
            gradientBlue.addColorStop(0, 'rgba(71,102,248,1)');
            gradientBlue.addColorStop(1, 'rgba(71,102,248,0)');

            const gradientMagnetos = ctx.createLinearGradient(0, 0, 0, 240);
            gradientMagnetos.addColorStop(0, 'rgba(167,64,248,1)');
            gradientMagnetos.addColorStop(1, 'rgba(167,64,248,0)');

            const gradientCandyGrapeFizz = ctx.createLinearGradient(0, 0, 0, 240);
            gradientCandyGrapeFizz.addColorStop(0, 'rgba(120,69,248,1)');
            gradientCandyGrapeFizz.addColorStop(1, 'rgba(120,69,248,0)');

            const gradientNearMoon = ctx.createLinearGradient(0, 0, 0, 240);
            gradientNearMoon.addColorStop(0, 'rgba(107,220,226,1)');
            gradientNearMoon.addColorStop(1, 'rgba(107,220,226,0)');

            const gradientThorsThunder = ctx.createLinearGradient(0, 0, 0, 240);
            gradientThorsThunder.addColorStop(0, 'rgba(110,200,250,1)');
            gradientThorsThunder.addColorStop(1, 'rgba(110,200,250,0)');

           let options = baseOptions({
                labels: data.map((row: [string, number]) => row[0]),
                data: data.map((row: [string, number]) => row[1]),
                backgroundColor: gradientGreen, // Default gradient
                pointBorderColor: '#7A8E8F',
                pointBackgroundColor: '#2D3843',
                min: 75,
                max: 100,
                gridColor: '#37434F'
	   });

            if (element.id === "upload_success_24h") {
                options.data.datasets[0].backgroundColor = gradientBlue;
            }

            if (element.id === "file_retrieval_rate_24h") {
                options.options.scales.y.min = 0;
                options.options.scales.y.max = 100;
                options.data.datasets[0].backgroundColor = gradientCandyGrapeFizz;
            }

            if (element.id === "chunk_retrieval_rate_24h") {
                options.options.scales.y.min = 0;
                options.options.scales.y.max = 100;
                options.data.datasets[0].backgroundColor = gradientMagnetos;
            }

            if (element.id === "chunk_retrieval_duration_24h") {
                options.data.datasets[0].backgroundColor = gradientNearMoon;
                let min = data.reduce((min: number, row: [string, number]) => Math.min(min, row[1]), 60);
                min = Math.floor(min / 10) * 10 - 10;
                let max = data.reduce((max: number, row: [string, number]) => Math.max(max, row[1]), 140);
                max = Math.ceil(max / 10) * 10 + 10;
                options.options.scales.y.min = min;
                options.options.scales.y.max = max;
            }

            if (element.id === "file_download_speed_24h") {
                options.data.datasets[0].backgroundColor = gradientThorsThunder;
                let min = data.reduce((min: number, row: [string, number]) => Math.min(min, row[1]), 0.8);
                min = Math.floor(min * 20) / 20 - 0.05;
                let max = data.reduce((max: number, row: [string, number]) => Math.max(max, row[1]), 1.3);
                max = Math.ceil(max * 20) / 20 + 0.05;
                options.options.scales.y.min = min;
                options.options.scales.y.max = max;
            }

            new Chart(
                element,
                // @ts-ignore
                options
            );
        }
    })();
</script>
